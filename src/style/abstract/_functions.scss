@use 'sass:math';

@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;

    // $number must be a number
    @if type-of($number) !=number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    // $digits must be a unitless number
    @if type-of($digits) !=number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @if $digits >0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }

    @if $mode ==round {
        @return math.div(math.round($number * $n), $n);
    } @else if $mode ==ceil {
        @return math.div(math.ceil($number * $n), $n);
    } @else if $mode ==floor {
        @return math.div(math.floor($number * $n), $n);
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

@function fluid($minSize, $maxSize, $units: 'vw', $minWidth: 360, $maxWidth: 1440) {
    // convert to rem
    $minSize: math.div($minSize, 16);
    $maxSize: math.div($maxSize, 16);
    $maxWidth: math.div($maxWidth, 16);
    $minWidth: math.div($minWidth, 16);
    // do calculations
    $slope: math.div(($maxSize - $minSize), ($maxWidth - $minWidth));
    $yAxisIntersection: -$minWidth * $slope + $minSize;
    $preferredValue: '#{decimal-round($yAxisIntersection,3)}rem + #{decimal-round(($slope*100),3) }#{$units}';
    // output as rem
    $minSize: decimal-round($minSize, 3) * 1rem;
    $maxSize: decimal-round($maxSize, 3) * 1rem;
    @return clamp(#{$minSize}, #{$preferredValue}, #{$maxSize});
}

@function rem($size) {
    $remValue: math.div($size, 16);
    $roundedValue: decimal-round($remValue, 3) * 1rem;

    @return $roundedValue;
}
